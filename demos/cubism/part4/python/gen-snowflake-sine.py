#!/usr/bin/env python3
"""
Generate sine wave data for snowflake movement in Alpine Winter 2026 demo.

This script creates:
1. X-position sine tables for horizontal drift
2. Y-speed tables for different falling speeds
3. ACME assembler include files
"""

import math
import sys

def generate_x_sine_table(amplitude=30, length=256):
    """
    Generate sine table for horizontal snowflake drift.
    
    Args:
        amplitude: Maximum horizontal displacement in pixels
        length: Number of entries in the sine table
    
    Returns:
        List of X offset values
    """
    sine_values = []
    for i in range(length):
        # Calculate sine value (-1 to 1)
        angle = (i / length) * 2 * math.pi
        sine_val = math.sin(angle)
        # Scale to amplitude and add center offset
        # C64 screen X range is approximately 24-344 for sprites
        x_offset = int(sine_val * amplitude + 160)  # Center at 160
        # Clamp to valid range
        x_offset = max(24, min(320, x_offset))
        sine_values.append(x_offset)
    return sine_values

def generate_y_speed_table(base_speed=1, variation=8, length=256):
    """
    Generate varying Y speeds for snowflakes based on sine wave.
    
    Args:
        base_speed: Minimum fall speed
        variation: Maximum additional speed
        length: Number of entries
    
    Returns:
        List of Y speed increments
    """
    speed_values = []
    for i in range(length):
        angle = (i / length) * 2 * math.pi
        # Use sine for smooth variation
        sine_val = (math.sin(angle) + 1) / 2  # Normalize to 0-1
        speed = int(base_speed + sine_val * variation)
        speed_values.append(speed)
    return speed_values

def write_asm_byte_table(filename, label, data, columns=8):
    """
    Write data as ACME assembler byte table.
    
    Args:
        filename: Output file path
        label: Assembly label name
        data: List of byte values
        columns: Number of values per line
    """
    with open(filename, 'w') as f:
        f.write(f"; Auto-generated snowflake movement data\n")
        f.write(f"; Generated by gen-snowflake-sine.py\n\n")
        f.write(f"{label}\n")
        
        for i in range(0, len(data), columns):
            chunk = data[i:i+columns]
            byte_str = ", ".join(f"${val:02x}" for val in chunk)
            f.write(f"  !byte {byte_str}\n")

def main():
    """Generate all snowflake movement data files."""
    
    print("Generating Alpine Winter 2026 snowflake movement data...")
    
    # Generate X-position sine table (horizontal drift)
    print("  - X-position sine table (30 pixel amplitude)...")
    x_sine = generate_x_sine_table(amplitude=30, length=256)
    write_asm_byte_table(
        '../sinus-snowflake-x-data.i',
        'snowflake_x_sine',
        x_sine,
        columns=8
    )
    
    # Generate alternative X-sine with larger amplitude for variety
    # NOTE: Reserved for future enhancement - not currently used in main.asm
    print("  - X-position sine table #2 (50 pixel amplitude) [reserved]...")
    x_sine2 = generate_x_sine_table(amplitude=50, length=256)
    write_asm_byte_table(
        '../sinus-snowflake-x2-data.i',
        'snowflake_x_sine_wide',
        x_sine2,
        columns=8
    )
    
    # Generate Y-speed variation table
    # NOTE: Reserved for future enhancement - not currently used in main.asm
    print("  - Y-speed variation table [reserved]...")
    y_speed = generate_y_speed_table(base_speed=1, variation=3, length=256)
    write_asm_byte_table(
        '../snowflake-y-speed-data.i',
        'snowflake_y_speed',
        y_speed,
        columns=8
    )
    
    # Generate initial Y positions for staggered start
    print("  - Initial Y positions...")
    initial_y = [i * 8 for i in range(32)]  # 32 snowflakes, staggered
    write_asm_byte_table(
        '../snowflake-initial-y-data.i',
        'snowflake_init_y',
        initial_y,
        columns=8
    )
    
    print("Done! Generated 4 data files.")
    print("\nFiles created:")
    print("  - sinus-snowflake-x-data.i")
    print("  - sinus-snowflake-x2-data.i")
    print("  - snowflake-y-speed-data.i")
    print("  - snowflake-initial-y-data.i")

if __name__ == "__main__":
    main()
