#!/usr/bin/env python3
"""
Generate snowflake sprite patterns for Alpine Winter 2026 demo.

Creates various snowflake designs in C64 sprite format (24x21 pixels).
"""

def create_snowflake_pattern_1():
    """
    Create a classic 6-pointed snowflake pattern.
    Returns 63 bytes of sprite data.
    """
    # Each row is 3 bytes (24 bits)
    # Using binary for clarity - 1 = pixel set, 0 = empty
    sprite_data = [
        0b00000000, 0b01000000, 0b00000000,  # Row 1
        0b00000000, 0b01000000, 0b00000000,  # Row 2
        0b00000000, 0b01000000, 0b00000000,  # Row 3
        0b00010000, 0b01000100, 0b00000000,  # Row 4
        0b00001000, 0b01001000, 0b00000000,  # Row 5
        0b00000100, 0b01010000, 0b00000000,  # Row 6
        0b00000010, 0b01100000, 0b00000000,  # Row 7
        0b00000001, 0b01000000, 0b00000000,  # Row 8
        0b11111111, 0b11111111, 0b10000000,  # Row 9 - center line
        0b00000001, 0b01000000, 0b00000000,  # Row 10
        0b00000010, 0b01100000, 0b00000000,  # Row 11
        0b00000100, 0b01010000, 0b00000000,  # Row 12
        0b00001000, 0b01001000, 0b00000000,  # Row 13
        0b00010000, 0b01000100, 0b00000000,  # Row 14
        0b00000000, 0b01000000, 0b00000000,  # Row 15
        0b00000000, 0b01000000, 0b00000000,  # Row 16
        0b00000000, 0b01000000, 0b00000000,  # Row 17
        0b00000000, 0b00000000, 0b00000000,  # Row 18
        0b00000000, 0b00000000, 0b00000000,  # Row 19
        0b00000000, 0b00000000, 0b00000000,  # Row 20
        0b00000000, 0b00000000, 0b00000000,  # Row 21
    ]
    return sprite_data

def create_snowflake_pattern_2():
    """
    Create a smaller, simpler snowflake.
    """
    sprite_data = [
        0b00000000, 0b00000000, 0b00000000,  # Row 1
        0b00000000, 0b00000000, 0b00000000,  # Row 2
        0b00000000, 0b00000000, 0b00000000,  # Row 3
        0b00000000, 0b01000000, 0b00000000,  # Row 4
        0b00000000, 0b01000000, 0b00000000,  # Row 5
        0b00010001, 0b01000100, 0b10000000,  # Row 6
        0b00001000, 0b01001000, 0b00000000,  # Row 7
        0b00000100, 0b01010000, 0b00000000,  # Row 8
        0b00111111, 0b11111111, 0b00000000,  # Row 9 - center
        0b00000100, 0b01010000, 0b00000000,  # Row 10
        0b00001000, 0b01001000, 0b00000000,  # Row 11
        0b00010001, 0b01000100, 0b10000000,  # Row 12
        0b00000000, 0b01000000, 0b00000000,  # Row 13
        0b00000000, 0b01000000, 0b00000000,  # Row 14
        0b00000000, 0b00000000, 0b00000000,  # Row 15
        0b00000000, 0b00000000, 0b00000000,  # Row 16
        0b00000000, 0b00000000, 0b00000000,  # Row 17
        0b00000000, 0b00000000, 0b00000000,  # Row 18
        0b00000000, 0b00000000, 0b00000000,  # Row 19
        0b00000000, 0b00000000, 0b00000000,  # Row 20
        0b00000000, 0b00000000, 0b00000000,  # Row 21
    ]
    return sprite_data

def create_snowflake_pattern_3():
    """
    Create a dense snowflake with more details.
    """
    sprite_data = [
        0b00000000, 0b00000000, 0b00000000,  # Row 1
        0b00000000, 0b01000000, 0b00000000,  # Row 2
        0b00000000, 0b01000000, 0b00000000,  # Row 3
        0b00000000, 0b11100000, 0b00000000,  # Row 4
        0b00010000, 0b11101000, 0b00000000,  # Row 5
        0b00001001, 0b01010010, 0b00000000,  # Row 6
        0b00000110, 0b01011000, 0b00000000,  # Row 7
        0b00000011, 0b11110000, 0b00000000,  # Row 8
        0b11111111, 0b11111111, 0b11000000,  # Row 9 - center
        0b00000011, 0b11110000, 0b00000000,  # Row 10
        0b00000110, 0b01011000, 0b00000000,  # Row 11
        0b00001001, 0b01010010, 0b00000000,  # Row 12
        0b00010000, 0b11101000, 0b00000000,  # Row 13
        0b00000000, 0b11100000, 0b00000000,  # Row 14
        0b00000000, 0b01000000, 0b00000000,  # Row 15
        0b00000000, 0b01000000, 0b00000000,  # Row 16
        0b00000000, 0b00000000, 0b00000000,  # Row 17
        0b00000000, 0b00000000, 0b00000000,  # Row 18
        0b00000000, 0b00000000, 0b00000000,  # Row 19
        0b00000000, 0b00000000, 0b00000000,  # Row 20
        0b00000000, 0b00000000, 0b00000000,  # Row 21
    ]
    return sprite_data

def write_sprite_data_asm(filename, sprites):
    """
    Write sprite data as ACME assembler include file.
    
    Args:
        filename: Output file path
        sprites: List of sprite patterns (each is 63 bytes)
    """
    with open(filename, 'w') as f:
        f.write("; Auto-generated snowflake sprite data\n")
        f.write("; Generated by gen-snowflake-sprites.py\n")
        f.write("; Each sprite is 63 bytes (21 rows x 3 bytes)\n\n")
        
        for idx, sprite in enumerate(sprites):
            f.write(f"; Snowflake pattern {idx + 1}\n")
            f.write(f"snowflake_sprite_{idx}\n")
            
            # Write in groups of 3 bytes (one row)
            for row in range(21):
                offset = row * 3
                bytes_row = sprite[offset:offset+3]
                byte_str = ", ".join(f"${b:02x}" for b in bytes_row)
                f.write(f"  !byte {byte_str}\n")
            
            f.write("\n")

def main():
    """Generate snowflake sprite patterns."""
    
    print("Generating snowflake sprite patterns...")
    
    # Create different snowflake patterns
    sprites = [
        create_snowflake_pattern_1(),
        create_snowflake_pattern_2(),
        create_snowflake_pattern_3(),
    ]
    
    # Write to assembly include file
    write_sprite_data_asm('../snowflake-sprite-data.i', sprites)
    
    print(f"Done! Generated {len(sprites)} snowflake sprite patterns.")
    print("File created: snowflake-sprite-data.i")

if __name__ == "__main__":
    main()
