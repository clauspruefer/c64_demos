#!/usr/bin/env python3
"""
Generate sine wave data for Halloween pumpkin sprite movement
Creates spooky floating pumpkin effect with slow sine wave
"""

import math

def generate_sine_wave(amplitude=80, frequency=1, num_points=256, offset=120):
    """Generate sine wave data for C64 sprite positioning"""
    sine_data = []
    
    for i in range(num_points):
        # Calculate sine value
        angle = (i / num_points) * (2 * math.pi * frequency)
        value = int(amplitude * math.sin(angle) + offset)
        
        # Clamp to valid C64 sprite X position range (0-255 for low byte)
        value = max(0, min(255, value))
        sine_data.append(value)
    
    return sine_data

def generate_asm_file(sine_data, filename):
    """Generate ACME assembler include file with sine data"""
    with open(filename, 'w') as f:
        f.write('; Sine wave data for Halloween pumpkin floating effect\n')
        f.write('; Generated by gen-halloween-sin.py\n')
        f.write('; 256 bytes of sine wave data\n\n')
        
        # Write data in rows of 8 bytes
        for i in range(0, len(sine_data), 8):
            chunk = sine_data[i:i+8]
            values = ','.join(f'${b:02x}' for b in chunk)
            f.write(f'!byte {values}\n')

def main():
    # Generate slow floating sine wave for pumpkin
    sine_data = generate_sine_wave(amplitude=80, frequency=1, num_points=256, offset=120)
    generate_asm_file(sine_data, '../pumpkin-sine-x.i')
    
    # Generate vertical wobble (smaller amplitude)
    sine_data_y = generate_sine_wave(amplitude=20, frequency=2, num_points=256, offset=100)
    generate_asm_file(sine_data_y, '../pumpkin-sine-y.i')
    
    print("Generated Halloween sine wave data files:")
    print("  - pumpkin-sine-x.i (horizontal movement)")
    print("  - pumpkin-sine-y.i (vertical wobble)")

if __name__ == '__main__':
    main()
